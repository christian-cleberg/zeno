#!/bin/bash

# TODO: Accept a git directory that may be full of repos, then loop through
read -p "Enter the path to your git repositories: " path

# Enter repository directory
output_path=$(pwd)
cd $path
git_dirs=$(ls -d */.git/ | sed "s/\/.git\///")
git_list=($git_dirs)

# Create fresh build directory
rm -rf "$output_path/build" && mkdir "$output_path/build"

# TODO: List of git repositories should be formatted as:
# Name - Description - Owner - Last Modified
html_index() {
  title=$1
  description=$2
  git_list=$3
  datetime=$(date)

  cat <<EOF
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="$description">
    <title>$title</title>
    <link rel="stylesheet" href="/styles.css">
  </head>
  <body>
    <main>
      <nav>
        <a href="/">$title</a>
      </nav>
      <hr>
      <h2>Repositories</h2>
      <ul>
        $(
          for i in "${git_list[@]}"
          do
            echo "<li><a href='/$i'>$i</a></li>"
          done
        )
      </ul>
    </main>
    <hr>
    <footer>
      <p>Generated by <a href="https://git.cleberg.net/cgit.cgi/zeno.git/">zeno</a> at $datetime</p>
    </footer>
  </body>
</html>
EOF
}

# TODO: Create vertical UL nav (will require creating repo/ dir instead of 
# repo.html):
# README (/), Log (/log/), Tree (/tree/), Diff (/diff/)
html_repo() {
  title=$1
  description=$2
  branches=$3
  log=$4
  diff=$5
  files=$6
  repo_name=$7
  git_url=$8
  ssh_url=$9
  datetime=$(date)

  cat <<EOF
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="$description">
    <title>$repo_name | $title</title>
    <link rel="stylesheet" href="/styles.css">
  </head>
  <body>
    <main>
      <nav>
        <a href="/">$title</a>
      </nav>
      <hr>
      <p>Clone</p>
      <p>git://$git_url/$repo_name.git</p>
      <p>ssh://$ssh_url/$repo_name.git</p>
      <hr>
      <p>Branches</p>
      <p>$(while IFS= read -r line; do echo "<br>$line"; done < <(printf '%s\n' "$branches"))</p>
      <hr>
      <p>Tree</p>
      <p>$(while IFS= read -r line; do echo "<br>$line"; done < <(printf '%s\n' "$files"))</p>
      <hr>
      <p>Last Commit</p>
      <pre><code>
      $(while IFS= read -r line; do
        escaped_line_tmp=${line//"<"/"&lt;"}
        escaped_line=${escaped_line_tmp/">"/"&gt;"}
        if [[ ${line:0:1} == \+ ]]; then
          echo "<span class='diff-add'>$escaped_line</span>";
        elif [[ ${line:0:1} == \- ]]; then
          echo "<span class='diff-del'>$escaped_line</span>";
        else
          echo "$escaped_line";
        fi
      done < <(printf '%s\n' "$diff"))
      </code></pre>
      <hr>
      <p>Log</p>
      <p>$(while IFS= read -r line; do echo "<br>$line"; done < <(printf '%s\n' "$log"))</p>
    </main>
    <hr>
    <footer>
      <p>Generated by <a href="https://git.cleberg.net/cgit.cgi/zeno.git/">zeno</a> at $datetime</p>
    </footer>
  </body>
</html>
EOF
}

# Gather HTML options
read -p "Please provide a site title: " title
read -p "Please provide a site description: " description
read -p "Please provide the Git clone URL: " git_url
read -p "Please provide the SSH clone URL: " ssh_url

# TODO: Loop and create index page with a list of links for each repository
html_index "$title" "$description" "$git_list" > "$output_path/build/index.html"

# TODO: Loop and add a page for each repository
for i in "${git_list[@]}"
do
  # Enter repository directory
  cd $i

  # Get repository info
  branches=$(git branch)
  log=$(git log)
  diff=$(git show)
  files=$(git ls-tree --name-only --full-tree -r HEAD)
  repo_name=$(basename `git rev-parse --show-toplevel`)
  repo_description=$(> .git/description)

  # Create repo dir and build HTML
  rm -rf "$output_path/build/$repo_name" && mkdir "$output_path/build/$repo_name"
  html_repo "$title" "$repo_description" "$branches" "$log" "$diff" "$files" "$repo_name" "$git_url" "$ssh_url" > "$output_path/build/$repo_name/index.html"

  # Reset to git directory
  cd $path
done

# TODO: Minify CSS on move (OPTIONAL FLAG)
# https://github.com/tdewolff/minify/tree/master/cmd/minify
cp "$output_path/styles.css" "$output_path/build/styles.css"
